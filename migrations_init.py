#!/usr/bin/env python
"""
Script de migration et initialisation de la base de donn√©es
Ce script v√©rifie et corrige la structure de la base de donn√©es automatiquement
"""
import os
import sys
import json
from app import create_app, db
from app.models.user import User
from app.models.talent import Talent, UserTalent
from app.models.location import Country, City
from app.models.cinema_talent import CinemaTalent
from app.utils.qr_generator import generate_qr_code
from app.utils.encryption import encrypt_sensitive_data
from app.data.world_countries import WORLD_COUNTRIES
from sqlalchemy import inspect, text
from datetime import datetime, date

def check_and_create_tables():
    """V√©rifie et cr√©e les tables manquantes"""
    print("üîç V√©rification de la structure de la base de donn√©es...")
    
    inspector = inspect(db.engine)
    existing_tables = inspector.get_table_names()
    
    required_tables = ['users', 'talents', 'user_talents', 'countries', 'cities']
    missing_tables = [table for table in required_tables if table not in existing_tables]
    
    if missing_tables:
        print(f"‚ö†Ô∏è  Tables manquantes d√©tect√©es: {', '.join(missing_tables)}")
        print("üìù Cr√©ation des tables manquantes...")
        db.create_all()
        print("‚úÖ Tables cr√©√©es avec succ√®s")
    else:
        print("‚úÖ Toutes les tables existent")
    
    return True

def check_and_add_columns():
    """V√©rifie et ajoute les colonnes manquantes"""
    print("\nüîç V√©rification des colonnes...")
    
    inspector = inspect(db.engine)
    
    user_columns_to_check = {
        'availability': 'VARCHAR(50)',
        'work_mode': 'VARCHAR(50)', 
        'rate_range': 'VARCHAR(100)',
        'profile_score': 'INTEGER DEFAULT 0',
        'cv_analysis': 'TEXT',
        'cv_analyzed_at': 'TIMESTAMP',
        'languages': 'VARCHAR(255)',
        'education': 'TEXT',
        'passport_number_encrypted': 'TEXT',
        'residence_card_encrypted': 'TEXT'
    }
    
    if 'users' in inspector.get_table_names():
        existing_columns = [col['name'] for col in inspector.get_columns('users')]
        
        for col_name, col_type in user_columns_to_check.items():
            if col_name not in existing_columns:
                print(f"‚ûï Ajout de la colonne users.{col_name}...")
                try:
                    with db.engine.connect() as conn:
                        conn.execute(text(f'ALTER TABLE users ADD COLUMN {col_name} {col_type}'))
                        conn.commit()
                    print(f"‚úÖ Colonne {col_name} ajout√©e")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Colonne {col_name} existe d√©j√† ou erreur: {e}")
    
    # V√©rifier les colonnes de cinema_talents
    cinema_columns_to_check = {
        'unique_code': 'VARCHAR(12) UNIQUE',
        'qr_code_filename': 'VARCHAR(255)'
    }
    
    if 'cinema_talents' in inspector.get_table_names():
        existing_cinema_columns = [col['name'] for col in inspector.get_columns('cinema_talents')]
        
        for col_name, col_type in cinema_columns_to_check.items():
            if col_name not in existing_cinema_columns:
                print(f"‚ûï Ajout de la colonne cinema_talents.{col_name}...")
                try:
                    with db.engine.connect() as conn:
                        conn.execute(text(f'ALTER TABLE cinema_talents ADD COLUMN {col_name} {col_type}'))
                        conn.commit()
                    print(f"‚úÖ Colonne {col_name} ajout√©e")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Colonne {col_name} existe d√©j√† ou erreur: {e}")
    
    print("‚úÖ V√©rification des colonnes termin√©e")
    return True

def seed_countries():
    """Remplir la table avec tous les pays du monde (195 pays reconnus)"""
    print("\nüåç Initialisation de tous les pays du monde...")
    
    # Utiliser la liste compl√®te des pays du monde
    countries_data = [{'name': c['name'], 'code': c['code']} for c in WORLD_COUNTRIES]
    
    count = 0
    for data in countries_data:
        if not Country.query.filter_by(code=data['code']).first():
            country = Country(**data)
            db.session.add(country)
            count += 1
    
    db.session.commit()
    print(f"‚úÖ {count} nouveaux pays ajout√©s ({len(countries_data)} total)")
    return True

def seed_cities():
    """Remplir la table des villes marocaines - Liste compl√®te tri√©e alphab√©tiquement"""
    print("\nüèôÔ∏è  Initialisation des villes marocaines...")
    
    cities_data = [
        {'name': 'Agadir', 'code': 'AGA'},
        {'name': 'A√Øn Harrouda', 'code': 'AHR'},
        {'name': 'Al Hoce√Øma', 'code': 'HOC'},
        {'name': 'Asilah', 'code': 'ASI'},
        {'name': 'Azemmour', 'code': 'AZE'},
        {'name': 'Azrou', 'code': 'AZR'},
        {'name': 'Ben Guerir', 'code': 'BGU'},
        {'name': 'B√©ni Mellal', 'code': 'BEM'},
        {'name': 'Benslimane', 'code': 'BSL'},
        {'name': 'Berkane', 'code': 'BRK'},
        {'name': 'Berrechid', 'code': 'BER'},
        {'name': 'Boujdour', 'code': 'BJD'},
        {'name': 'Bouskoura', 'code': 'BOU'},
        {'name': 'Casablanca', 'code': 'CAS'},
        {'name': 'Chefchaouen', 'code': 'CHF'},
        {'name': 'Dakhla', 'code': 'DAK'},
        {'name': 'El Hajeb', 'code': 'EHJ'},
        {'name': 'El Jadida', 'code': 'ELJ'},
        {'name': 'El Kelaa des Sraghna', 'code': 'EKS'},
        {'name': 'Errachidia', 'code': 'ERR'},
        {'name': 'Essaouira', 'code': 'ESS'},
        {'name': 'F√®s', 'code': 'FES'},
        {'name': 'Figuig', 'code': 'FIG'},
        {'name': 'Fnideq', 'code': 'FNI'},
        {'name': 'Guelmim', 'code': 'GUE'},
        {'name': 'Guercif', 'code': 'GCF'},
        {'name': 'Ifrane', 'code': 'IFR'},
        {'name': 'Imouzzer Kandar', 'code': 'IMK'},
        {'name': 'Inezgane', 'code': 'INE'},
        {'name': 'Jerada', 'code': 'JER'},
        {'name': 'Kelaat MGouna', 'code': 'KMG'},
        {'name': 'Kenitra', 'code': 'KEN'},
        {'name': 'Kh√©misset', 'code': 'KHE'},
        {'name': 'Khenifra', 'code': 'KHN'},
        {'name': 'Khouribga', 'code': 'KHO'},
        {'name': 'Ksar El K√©bir', 'code': 'KSA'},
        {'name': 'La√¢youne', 'code': 'LAA'},
        {'name': 'Larache', 'code': 'LAR'},
        {'name': 'Marrakech', 'code': 'MAR'},
        {'name': 'Martil', 'code': 'MRT'},
        {'name': 'Mdiq', 'code': 'MDQ'},
        {'name': 'Mekn√®s', 'code': 'MEK'},
        {'name': 'Midelt', 'code': 'MID'},
        {'name': 'Mohammedia', 'code': 'MOH'},
        {'name': 'Nador', 'code': 'NAD'},
        {'name': 'Nouaceur', 'code': 'NOU'},
        {'name': 'Oualidia', 'code': 'OAL'},
        {'name': 'Ouarzazate', 'code': 'OZZ'},
        {'name': 'Oued Zem', 'code': 'OZM'},
        {'name': 'Ouezzane', 'code': 'OUZ'},
        {'name': 'Oujda', 'code': 'OUJ'},
        {'name': 'Rabat', 'code': 'RAB'},
        {'name': 'Safi', 'code': 'SAF'},
        {'name': 'Sal√©', 'code': 'SAL'},
        {'name': 'Sefrou', 'code': 'SEF'},
        {'name': 'Settat', 'code': 'SET'},
        {'name': 'Sidi Bennour', 'code': 'SBN'},
        {'name': 'Sidi Ifni', 'code': 'SIF'},
        {'name': 'Sidi Kacem', 'code': 'SKC'},
        {'name': 'Sidi Slimane', 'code': 'SSL'},
        {'name': 'Skhirat', 'code': 'SKH'},
        {'name': 'Smara', 'code': 'SMA'},
        {'name': 'Tafraout', 'code': 'TAF'},
        {'name': 'Taghazout', 'code': 'TAG'},
        {'name': 'Tan-Tan', 'code': 'TAN'},
        {'name': 'Tanger', 'code': 'TNG'},
        {'name': 'Taourirt', 'code': 'TAO'},
        {'name': 'Tarfaya', 'code': 'TRF'},
        {'name': 'Taroudant', 'code': 'TRD'},
        {'name': 'Tata', 'code': 'TAT'},
        {'name': 'Taza', 'code': 'TAZ'},
        {'name': 'T√©mara', 'code': 'TEM'},
        {'name': 'T√©touan', 'code': 'TET'},
        {'name': 'Tiflet', 'code': 'TIF'},
        {'name': 'Tinghir', 'code': 'TGH'},
        {'name': 'Tiznit', 'code': 'TIZ'},
        {'name': 'Youssoufia', 'code': 'YOU'},
        {'name': 'Zagora', 'code': 'ZAG'},
        {'name': 'Za√Øo', 'code': 'ZAI'},
    ]
    
    count = 0
    for data in cities_data:
        if not City.query.filter_by(code=data['code']).first():
            city = City(**data)
            db.session.add(city)
            count += 1
    
    db.session.commit()
    print(f"‚úÖ {count} nouvelles villes ajout√©es ({len(cities_data)} total)")
    return True

def seed_talents():
    """Remplir la table des talents"""
    print("\n‚≠ê Initialisation des talents...")
    
    talents_data = [
        {'name': 'Ma√ßonnerie', 'emoji': 'üß±', 'category': 'Construction'},
        {'name': 'Carrelage', 'emoji': '‚¨ú', 'category': 'Construction'},
        {'name': 'Plomberie', 'emoji': 'üîß', 'category': 'Construction'},
        {'name': '√âlectricit√©', 'emoji': '‚ö°', 'category': 'Construction'},
        {'name': 'Menuiserie', 'emoji': 'ü™ö', 'category': 'Construction'},
        {'name': 'Peinture', 'emoji': 'üé®', 'category': 'Construction'},
        {'name': 'Soudure', 'emoji': 'üî•', 'category': 'Construction'},
        {'name': 'Ferronnerie', 'emoji': '‚öíÔ∏è', 'category': 'Construction'},
        {'name': 'Charpenterie', 'emoji': 'ü™µ', 'category': 'Construction'},
        {'name': 'Toiture', 'emoji': 'üè†', 'category': 'Construction'},
        {'name': 'Isolation', 'emoji': 'üß∞', 'category': 'Construction'},
        {'name': 'Climatisation', 'emoji': '‚ùÑÔ∏è', 'category': 'Construction'},
        {'name': 'Cuisine', 'emoji': 'üç≥', 'category': 'Restauration'},
        {'name': 'P√¢tisserie', 'emoji': 'üßÅ', 'category': 'Restauration'},
        {'name': 'Boulangerie', 'emoji': 'ü•ñ', 'category': 'Restauration'},
        {'name': 'Serveur', 'emoji': 'üçΩÔ∏è', 'category': 'Restauration'},
        {'name': 'Barista', 'emoji': '‚òï', 'category': 'Restauration'},
        {'name': 'Chef cuisine', 'emoji': 'üë®\u200düç≥', 'category': 'Restauration'},
        {'name': 'D√©veloppement Web', 'emoji': 'üñ•Ô∏è', 'category': 'Technologie'},
        {'name': 'D√©veloppement Mobile', 'emoji': 'üì±', 'category': 'Technologie'},
        {'name': 'Data Science', 'emoji': 'üìä', 'category': 'Technologie'},
        {'name': 'IA/ML', 'emoji': 'ü§ñ', 'category': 'Technologie'},
        {'name': 'Cybers√©curit√©', 'emoji': 'üîí', 'category': 'Technologie'},
        {'name': 'DevOps', 'emoji': '‚öôÔ∏è', 'category': 'Technologie'},
        {'name': 'Maintenance IT', 'emoji': 'üîå', 'category': 'Technologie'},
        {'name': 'R√©seaux', 'emoji': 'üåê', 'category': 'Technologie'},
        {'name': 'Graphisme', 'emoji': 'üé®', 'category': 'Cr√©atif'},
        {'name': 'UI/UX Design', 'emoji': '‚úèÔ∏è', 'category': 'Cr√©atif'},
        {'name': 'Illustration', 'emoji': 'üñåÔ∏è', 'category': 'Cr√©atif'},
        {'name': 'Animation 3D', 'emoji': 'üé¨', 'category': 'Cr√©atif'},
        {'name': 'Motion Design', 'emoji': 'üéûÔ∏è', 'category': 'Cr√©atif'},
        {'name': 'Photographie', 'emoji': 'üì∑', 'category': 'M√©dias'},
        {'name': 'Vid√©ographie', 'emoji': 'üé•', 'category': 'M√©dias'},
        {'name': 'Montage vid√©o', 'emoji': '‚úÇÔ∏è', 'category': 'M√©dias'},
        {'name': 'R√©daction', 'emoji': '‚úçÔ∏è', 'category': 'M√©dias'},
        {'name': 'Journalisme', 'emoji': 'üì∞', 'category': 'M√©dias'},
        {'name': 'Community Management', 'emoji': 'üí¨', 'category': 'Marketing'},
        {'name': 'SEO/SEA', 'emoji': 'üîç', 'category': 'Marketing'},
        {'name': 'Marketing digital', 'emoji': 'üìà', 'category': 'Marketing'},
        {'name': 'Content Marketing', 'emoji': 'üìù', 'category': 'Marketing'},
        {'name': 'Email Marketing', 'emoji': 'üìß', 'category': 'Marketing'},
        {'name': 'Musique', 'emoji': 'üéµ', 'category': 'Artistique'},
        {'name': 'Chant', 'emoji': 'üé§', 'category': 'Artistique'},
        {'name': 'Danse', 'emoji': 'üíÉ', 'category': 'Artistique'},
        {'name': 'Th√©√¢tre', 'emoji': 'üé≠', 'category': 'Artistique'},
        {'name': 'Mannequinat', 'emoji': 'üï¥Ô∏è', 'category': 'Artistique'},
        {'name': 'Com√©die', 'emoji': 'üòÇ', 'category': 'Artistique'},
        {'name': 'M√©nage', 'emoji': 'üßπ', 'category': 'Services'},
        {'name': 'Jardinage', 'emoji': 'üå±', 'category': 'Services'},
        {'name': "Garde d'enfants", 'emoji': 'üë∂', 'category': 'Services'},
        {'name': 'Aide √† domicile', 'emoji': 'üè°', 'category': 'Services'},
        {'name': 'Coiffure', 'emoji': 'üíá', 'category': 'Services'},
        {'name': 'Esth√©tique', 'emoji': 'üíÖ', 'category': 'Services'},
        {'name': 'Chauffeur', 'emoji': 'üöó', 'category': 'Transport'},
        {'name': 'Livreur', 'emoji': 'üì¶', 'category': 'Transport'},
        {'name': 'Taxi', 'emoji': 'üöï', 'category': 'Transport'},
        {'name': 'Enseignant', 'emoji': 'üë®\u200düè´', 'category': '√âducation'},
        {'name': 'Formation professionnelle', 'emoji': 'üìö', 'category': '√âducation'},
        {'name': 'Cours particuliers', 'emoji': 'üìñ', 'category': '√âducation'},
        {'name': 'Coaching', 'emoji': 'üéØ', 'category': '√âducation'},
        {'name': 'Infirmier', 'emoji': 'üíâ', 'category': 'Sant√©'},
        {'name': 'Aide-soignant', 'emoji': 'ü©∫', 'category': 'Sant√©'},
        {'name': 'Pharmacien', 'emoji': 'üíä', 'category': 'Sant√©'},
        {'name': 'Vente', 'emoji': 'üõçÔ∏è', 'category': 'Commerce'},
        {'name': 'Commerce', 'emoji': 'üè™', 'category': 'Commerce'},
        {'name': 'Caissier', 'emoji': 'üí∞', 'category': 'Commerce'},
        {'name': 'Organisation √©v√©nements', 'emoji': 'üéâ', 'category': '√âv√©nementiel'},
        {'name': 'Animation', 'emoji': 'üéä', 'category': '√âv√©nementiel'},
        {'name': 'DJ', 'emoji': 'üéß', 'category': '√âv√©nementiel'},
        {'name': 'Secr√©tariat', 'emoji': 'üìã', 'category': 'Bureautique'},
        {'name': 'Comptabilit√©', 'emoji': 'üßÆ', 'category': 'Bureautique'},
        {'name': 'Ressources Humaines', 'emoji': 'üë•', 'category': 'Bureautique'},
        {'name': 'Gestion de projet', 'emoji': 'üìä', 'category': 'Bureautique'},
    ]
    
    count = 0
    for data in talents_data:
        if not Talent.query.filter_by(name=data['name']).first():
            talent = Talent(**data)
            db.session.add(talent)
            count += 1
    
    db.session.commit()
    print(f"‚úÖ {count} nouveaux talents ajout√©s ({len(talents_data)} total)")
    return True

def create_admin_user():
    """Cr√©er le compte super admin (idempotent)"""
    print("\nüë§ V√©rification du compte admin...")
    
    admin_email = 'admin@talento.com'
    admin_code = 'MARAB0001N'
    
    admin = User.query.filter(
        (User.email == admin_email) | (User.unique_code == admin_code)
    ).first()
    
    if not admin:
        print("‚ûï Cr√©ation du compte super admin...")
        
        admin_password = os.environ.get('ADMIN_PASSWORD', '@4dm1n')
        
        morocco = Country.query.filter_by(code='MA').first()
        rabat = City.query.filter_by(code='RAB').first()
        
        admin = User(
            email=admin_email,
            first_name='Admin',
            last_name='Talento',
            unique_code=admin_code,
            is_admin=True,
            account_active=True,
            country_id=morocco.id if morocco else None,
            city_id=rabat.id if rabat else None,
            gender='N'
        )
        admin.set_password(admin_password)
        admin.phone = '+212600000000'
        
        db.session.add(admin)
        
        try:
            db.session.commit()
            print(f"‚úÖ Compte admin cr√©√©: {admin_email}")
            print(f"   Code unique: {admin_code}")
            print(f"   Mot de passe: {'[Variable ADMIN_PASSWORD]' if os.environ.get('ADMIN_PASSWORD') else '@4dm1n'}")
        except Exception as e:
            db.session.rollback()
            admin = User.query.filter(
                (User.email == admin_email) | (User.unique_code == admin_code)
            ).first()
            if admin:
                print(f"‚úÖ Compte admin existe d√©j√† (d√©tect√© apr√®s rollback): {admin.email}")
            else:
                print(f"‚ö†Ô∏è  Erreur inattendue lors de la cr√©ation admin: {e}")
                raise
    else:
        print(f"‚úÖ Compte admin existe d√©j√†: {admin.email}")
        if admin.email != admin_email or not admin.is_admin:
            admin.email = admin_email
            admin.is_admin = True
            try:
                db.session.commit()
                print("   ‚ÑπÔ∏è  Compte admin mis √† jour")
            except Exception as e:
                db.session.rollback()
                print(f"   ‚ö†Ô∏è  Impossible de mettre √† jour: {e}")
    
    return True

def create_demo_users():
    """Cr√©er 5 utilisateurs de d√©monstration (idempotent)"""
    print("\nüë• V√©rification des utilisateurs de d√©monstration...")
    
    morocco = Country.query.filter_by(code='MA').first()
    casablanca = City.query.filter_by(code='CAS').first()
    rabat = City.query.filter_by(code='RAB').first()
    marrakech = City.query.filter_by(code='MAR').first()
    tanger = City.query.filter_by(code='TNG').first()
    
    if not morocco or not casablanca or not rabat:
        print("‚ö†Ô∏è  Pays ou villes manquants, impossible de cr√©er les d√©mos")
        return False
    
    talent_dev_web = Talent.query.filter_by(name='D√©veloppement Web').first()
    talent_dev_mobile = Talent.query.filter_by(name='D√©veloppement Mobile').first()
    talent_graphisme = Talent.query.filter_by(name='Graphisme').first()
    talent_uiux = Talent.query.filter_by(name='UI/UX Design').first()
    talent_plomberie = Talent.query.filter_by(name='Plomberie').first()
    talent_electricite = Talent.query.filter_by(name='√âlectricit√©').first()
    talent_cuisine = Talent.query.filter_by(name='Cuisine').first()
    talent_patisserie = Talent.query.filter_by(name='P√¢tisserie').first()
    talent_marketing = Talent.query.filter_by(name='Marketing digital').first()
    talent_seo = Talent.query.filter_by(name='SEO/SEA').first()
    
    demo_users = [
        {
            'email': 'demo1@talento.com',
            'unique_code': 'MACAS0002M',
            'first_name': 'Ahmed',
            'last_name': 'Bennani',
            'gender': 'M',
            'country_id': morocco.id,
            'city_id': casablanca.id,
            'date_of_birth': datetime(1990, 3, 15).date(),
            'phone': '+212661234567',
            'whatsapp': '+212661234567',
            'address': '15 Boulevard Zerktouni, Casablanca',
            'passport_number': 'ab123456',
            'residence_card': 'ma2024001234',
            'bio': 'D√©veloppeur web full-stack passionn√© avec 5 ans d\'exp√©rience dans la cr√©ation d\'applications web modernes. Sp√©cialis√© en React, Node.js et Python. J\'ai travaill√© sur plus de 30 projets pour des clients internationaux.',
            'years_experience': 5,
            'availability': 'Temps plein',
            'work_mode': 'Hybride',
            'rate_range': '400-600 MAD/heure',
            'languages': 'Fran√ßais,Anglais,Arabe,Darija',
            'education': 'Master en Informatique - ENSIAS',
            'linkedin': 'https://linkedin.com/in/ahmed-bennani-dev',
            'github': 'https://github.com/ahmedbennani',
            'twitter': 'https://twitter.com/ahmed_codes',
            'portfolio_url': 'https://ahmed-bennani.dev',
            'talents': [t.id for t in [talent_dev_web, talent_dev_mobile] if t]
        },
        {
            'email': 'demo2@talento.com',
            'unique_code': 'MARAB0002F',
            'first_name': 'Fatima',
            'last_name': 'El Amrani',
            'gender': 'F',
            'country_id': morocco.id,
            'city_id': rabat.id,
            'date_of_birth': datetime(1993, 7, 22).date(),
            'phone': '+212662345678',
            'whatsapp': '+212662345678',
            'address': '28 Avenue Mohammed V, Rabat',
            'passport_number': 'cd789012',
            'residence_card': 'ma2024005678',
            'bio': 'Designer graphique cr√©ative sp√©cialis√©e en branding et identit√© visuelle. Portfolio comprenant des marques nationales et internationales. Passionn√©e par le design minimaliste et l\'impact visuel fort.',
            'years_experience': 3,
            'availability': 'Temps plein',
            'work_mode': '√Ä distance',
            'rate_range': '300-500 MAD/heure',
            'languages': 'Fran√ßais,Anglais,Arabe,Darija',
            'education': '√âcole Sup√©rieure des Beaux-Arts',
            'linkedin': 'https://linkedin.com/in/fatima-elamrani',
            'behance': 'https://behance.net/fatimaelamrani',
            'dribbble': 'https://dribbble.com/fatima_design',
            'instagram': 'https://instagram.com/fatima.design',
            'portfolio_url': 'https://fatima-elamrani.com',
            'talents': [t.id for t in [talent_graphisme, talent_uiux] if t]
        },
        {
            'email': 'demo3@talento.com',
            'unique_code': 'MACAS0003M',
            'first_name': 'Youssef',
            'last_name': 'Tazi',
            'gender': 'M',
            'country_id': morocco.id,
            'city_id': casablanca.id,
            'date_of_birth': datetime(1985, 11, 8).date(),
            'phone': '+212663456789',
            'whatsapp': '+212663456789',
            'address': '42 Rue des Oudayas, Casablanca',
            'passport_number': 'ef345678',
            'residence_card': 'ma2023009876',
            'bio': 'Plombier professionnel certifi√© avec 10 ans d\'exp√©rience. Interventions rapides 24/7, sp√©cialiste en installation sanitaire moderne, d√©tection de fuites et r√©novation compl√®te. Plus de 500 chantiers r√©ussis.',
            'years_experience': 10,
            'availability': 'Flexible',
            'work_mode': 'Sur site',
            'rate_range': '200-350 MAD/heure',
            'languages': 'Fran√ßais,Arabe,Darija',
            'education': 'Formation professionnelle OFPPT',
            'facebook': 'https://facebook.com/youssef.tazi.plomberie',
            'whatsapp': '+212663456789',
            'talents': [t.id for t in [talent_plomberie, talent_electricite] if t]
        },
        {
            'email': 'demo4@talento.com',
            'unique_code': 'MARAB0003F',
            'first_name': 'Samira',
            'last_name': 'Chraibi',
            'gender': 'F',
            'country_id': morocco.id,
            'city_id': marrakech.id if marrakech else rabat.id,
            'date_of_birth': datetime(1988, 5, 30).date(),
            'phone': '+212664567890',
            'whatsapp': '+212664567890',
            'address': '7 Rue de la Kasbah, Marrakech',
            'passport_number': 'gh901234',
            'residence_card': 'ma2024011222',
            'bio': 'Chef de cuisine passionn√©e avec 7 ans d\'exp√©rience en gastronomie fran√ßaise et marocaine. Sp√©cialiste en p√¢tisserie fine et cuisine fusion. Dipl√¥m√©e Le Cordon Bleu Paris. Organisatrice d\'√©v√©nements culinaires.',
            'years_experience': 7,
            'availability': 'Temps partiel',
            'work_mode': 'Sur site',
            'rate_range': '250-400 MAD/heure',
            'languages': 'Fran√ßais,Anglais,Arabe,Darija',
            'education': 'Le Cordon Bleu Paris',
            'instagram': 'https://instagram.com/chef.samira',
            'facebook': 'https://facebook.com/chefsamirachraibi',
            'youtube': 'https://youtube.com/@ChefSamira',
            'tiktok': 'https://tiktok.com/@chef.samira',
            'talents': [t.id for t in [talent_cuisine, talent_patisserie] if t]
        },
        {
            'email': 'demo5@talento.com',
            'unique_code': 'MACAS0004M',
            'first_name': 'Omar',
            'last_name': 'Alaoui',
            'gender': 'M',
            'country_id': morocco.id,
            'city_id': tanger.id if tanger else casablanca.id,
            'date_of_birth': datetime(1992, 9, 12).date(),
            'phone': '+212665678901',
            'whatsapp': '+212665678901',
            'address': '33 Boulevard Pasteur, Tanger',
            'passport_number': 'ij567890',
            'residence_card': 'ma2024015544',
            'bio': 'Expert en marketing digital et SEO avec 4 ans d\'exp√©rience. Sp√©cialiste en croissance organique, publicit√© Google/Facebook, et strat√©gie de contenu. R√©sultats prouv√©s : +250% de trafic pour mes clients.',
            'years_experience': 4,
            'availability': 'Temps plein',
            'work_mode': '√Ä distance',
            'rate_range': '350-550 MAD/heure',
            'languages': 'Fran√ßais,Anglais,Espagnol,Arabe,Darija',
            'education': 'MBA Digital Marketing',
            'linkedin': 'https://linkedin.com/in/omar-alaoui-seo',
            'twitter': 'https://twitter.com/omar_seo',
            'facebook': 'https://facebook.com/omar.alaoui.marketing',
            'instagram': 'https://instagram.com/omar.marketing',
            'portfolio_url': 'https://omar-alaoui-seo.com',
            'talents': [t.id for t in [talent_marketing, talent_seo] if t]
        }
    ]
    
    count = 0
    for demo_data in demo_users:
        existing = User.query.filter_by(email=demo_data['email']).first()
        if not existing:
            talents = demo_data.pop('talents')
            phone_val = demo_data.pop('phone', None)
            whatsapp_val = demo_data.pop('whatsapp', None)
            address_val = demo_data.pop('address', None)
            passport_val = demo_data.pop('passport_number', None)
            residence_val = demo_data.pop('residence_card', None)
            
            user = User(**demo_data)
            user.set_password('demo123')
            user.account_active = True
            
            if phone_val:
                user.phone = phone_val
            if whatsapp_val:
                user.whatsapp = whatsapp_val
            if address_val:
                user.address = address_val
            if passport_val:
                user.passport_number = passport_val
            if residence_val:
                user.residence_card = residence_val
            
            db.session.add(user)
            db.session.flush()
            
            for talent_id in talents:
                user_talent = UserTalent(user_id=user.id, talent_id=talent_id)
                db.session.add(user_talent)
            
            count += 1
    
    if count > 0:
        db.session.commit()
        print(f"‚úÖ {count} nouveaux utilisateurs de d√©monstration cr√©√©s")
    else:
        print("‚úÖ Les utilisateurs de d√©monstration existent d√©j√†")
    
    return True

def create_demo_cinema_talents():
    """Cr√©er 3 profils CINEMA de d√©monstration avec tous les champs remplis"""
    print("\nüé¨ Cr√©ation des profils CINEMA de d√©monstration...")
    
    demo_cinema_talents = [
        {
            # Profile 1: Actrice marocaine
            'first_name': 'Amina',
            'last_name': 'El Fassi',
            'gender': 'F',
            'date_of_birth': date(1995, 3, 15),
            'id_document_type': 'CIN',
            'id_document_number': 'AB123456',
            'ethnicities': json.dumps(['Arabe', 'Amazigh']),
            'country_of_origin': 'Maroc',
            'nationality': 'Marocaine',
            'country_of_residence': 'Maroc',
            'city_of_residence': 'Casablanca',
            'languages_spoken': json.dumps(['Arabe', 'Fran√ßais', 'Anglais', 'Amazigh (Tamazight)']),
            'years_of_experience': 8,
            'eye_color': 'Marron',
            'hair_color': 'Noir',
            'hair_type': 'Ondul√©',
            'height': 168,
            'skin_tone': 'Olive',
            'build': 'Athl√©tique',
            'other_talents': json.dumps(['Acteur/Actrice', 'Danseur/Danseuse', 'Mannequin']),
            'email': 'amina.elfassi@demo.cinema',
            'phone': '+212612345678',
            'whatsapp': '+212612345678',
            'facebook': 'amina.elfassi.cinema',
            'instagram': '@amina_elfassi_official',
            'tiktok': '@amina_cinema',
            'youtube': 'Amina El Fassi',
            'previous_productions': json.dumps([
                {'title': 'Le C≈ìur de Casablanca', 'year': '2022', 'type': 'Film'},
                {'title': 'Racines du D√©sert', 'year': '2021', 'type': 'S√©rie TV'}
            ])
        },
        {
            # Profile 2: Acteur fran√ßais
            'first_name': 'Julien',
            'last_name': 'Moreau',
            'gender': 'M',
            'date_of_birth': date(1988, 7, 22),
            'id_document_type': 'Passeport',
            'id_document_number': 'FR987654',
            'ethnicities': json.dumps(['Europ√©en']),
            'country_of_origin': 'France',
            'nationality': 'Fran√ßaise',
            'country_of_residence': 'France',
            'city_of_residence': 'Paris',
            'languages_spoken': json.dumps(['Fran√ßais', 'Anglais', 'Espagnol', 'Italien']),
            'years_of_experience': 12,
            'eye_color': 'Bleu',
            'hair_color': 'Ch√¢tain',
            'hair_type': 'Droit',
            'height': 182,
            'skin_tone': 'Claire',
            'build': 'Muscl√©',
            'other_talents': json.dumps(['Acteur/Actrice', 'Chanteur/Chanteuse', 'Cascadeur/Cascadeuse', 'Arts martiaux']),
            'email': 'julien.moreau@demo.cinema',
            'phone': '+33612345678',
            'whatsapp': '+33612345678',
            'facebook': 'julien.moreau.actor',
            'instagram': '@julien_moreau_films',
            'twitter': '@JulienMoreauFR',
            'linkedin': 'julien-moreau-actor',
            'youtube': 'Julien Moreau Channel',
            'previous_productions': json.dumps([
                {'title': 'Les Ombres de Paris', 'year': '2023', 'type': 'Film'},
                {'title': 'Brigade Criminelle', 'year': '2020-2022', 'type': 'S√©rie TV'},
                {'title': 'Le Dernier Voyage', 'year': '2019', 'type': 'Film'}
            ])
        },
        {
            # Profile 3: Acteur nig√©rian
            'first_name': 'Chukwudi',
            'last_name': 'Okonkwo',
            'gender': 'M',
            'date_of_birth': date(1992, 11, 5),
            'id_document_type': 'Passeport',
            'id_document_number': 'NG456789',
            'ethnicities': json.dumps(['Igbo', 'Yoruba']),
            'country_of_origin': 'Nig√©ria',
            'nationality': 'Nig√©riane',
            'country_of_residence': 'Nig√©ria',
            'city_of_residence': 'Lagos',
            'languages_spoken': json.dumps(['Anglais', 'Igbo', 'Yoruba', 'Haoussa', 'Fran√ßais']),
            'years_of_experience': 6,
            'eye_color': 'Marron fonc√©',
            'hair_color': 'Noir',
            'hair_type': 'Cr√©pu',
            'height': 178,
            'skin_tone': 'Fonc√©e',
            'build': 'Athl√©tique',
            'other_talents': json.dumps(['Acteur/Actrice', 'Com√©dien/Com√©dienne', 'Musicien/Musicienne', 'R√©alisateur/R√©alisatrice']),
            'email': 'chukwudi.okonkwo@demo.cinema',
            'phone': '+2348012345678',
            'whatsapp': '+2348012345678',
            'facebook': 'chukwudi.okonkwo.nollywood',
            'instagram': '@chukwudi_nollywood',
            'tiktok': '@chukwudi_movies',
            'snapchat': 'chukwudi_cinema',
            'twitter': '@ChukwudiActor',
            'youtube': 'Chukwudi Okonkwo',
            'previous_productions': json.dumps([
                {'title': 'Lagos Love Story', 'year': '2023', 'type': 'Film'},
                {'title': 'The King\'s Return', 'year': '2022', 'type': 'Film'},
                {'title': 'Family Ties', 'year': '2021-2023', 'type': 'S√©rie TV'}
            ])
        }
    ]
    
    count = 0
    for talent_data in demo_cinema_talents:
        # V√©rifier si le profil existe d√©j√†
        if CinemaTalent.query.filter_by(email=talent_data['email']).first():
            continue
        
        # Extraire les champs √† crypter
        id_document_number = talent_data.pop('id_document_number')
        phone = talent_data.pop('phone')
        whatsapp = talent_data.pop('whatsapp', None)
        facebook = talent_data.pop('facebook', None)
        instagram = talent_data.pop('instagram', None)
        twitter = talent_data.pop('twitter', None)
        linkedin = talent_data.pop('linkedin', None)
        youtube = talent_data.pop('youtube', None)
        tiktok = talent_data.pop('tiktok', None)
        snapchat = talent_data.pop('snapchat', None)
        
        # Cr√©er le profil
        talent = CinemaTalent(**talent_data)
        
        # Crypter les donn√©es sensibles
        talent.id_document_number_encrypted = encrypt_sensitive_data(id_document_number)
        talent.phone_encrypted = encrypt_sensitive_data(phone)
        if whatsapp:
            talent.whatsapp_encrypted = encrypt_sensitive_data(whatsapp)
        if facebook:
            talent.facebook_encrypted = encrypt_sensitive_data(facebook)
        if instagram:
            talent.instagram_encrypted = encrypt_sensitive_data(instagram)
        if twitter:
            talent.twitter_encrypted = encrypt_sensitive_data(twitter)
        if linkedin:
            talent.linkedin_encrypted = encrypt_sensitive_data(linkedin)
        if youtube:
            talent.youtube_encrypted = encrypt_sensitive_data(youtube)
        if tiktok:
            talent.tiktok_encrypted = encrypt_sensitive_data(tiktok)
        if snapchat:
            talent.snapchat_encrypted = encrypt_sensitive_data(snapchat)
        
        db.session.add(talent)
        count += 1
    
    if count > 0:
        db.session.commit()
        print(f"‚úÖ {count} profils CINEMA de d√©monstration cr√©√©s")
    else:
        print("‚úÖ Les profils CINEMA de d√©monstration existent d√©j√†")
    
    return True

def generate_codes_for_cinema_talents():
    """G√©n√©rer les codes uniques et QR codes pour les talents CINEMA"""
    print("\nüé¨ G√©n√©ration des codes uniques et QR codes CINEMA...")
    
    from app.utils.cinema_code_generator import generate_cinema_unique_code
    from flask import current_app
    
    talents_without_code = CinemaTalent.query.filter(CinemaTalent.unique_code == None).all()
    
    if not talents_without_code:
        print("‚úÖ Tous les profils CINEMA ont d√©j√† des codes uniques")
        return True
    
    count = 0
    for talent in talents_without_code:
        try:
            # G√©n√©rer le code unique
            unique_code = generate_cinema_unique_code(
                talent.country_of_residence,
                talent.city_of_residence,
                talent.gender
            )
            talent.unique_code = unique_code
            
            # G√©n√©rer le QR code
            upload_folder = current_app.config.get('UPLOAD_FOLDER', 'app/static/uploads')
            qr_save_path = os.path.join(upload_folder, 'qrcodes')
            
            # Cr√©er le dossier si n√©cessaire
            os.makedirs(qr_save_path, exist_ok=True)
            
            qr_filename = generate_qr_code(unique_code, qr_save_path)
            talent.qr_code_filename = qr_filename
            
            count += 1
            print(f"  ‚úì Code g√©n√©r√© pour {talent.full_name}: {unique_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur pour {talent.full_name}: {e}")
    
    if count > 0:
        db.session.commit()
        print(f"‚úÖ {count} codes et QR codes CINEMA g√©n√©r√©s avec succ√®s")
    
    return True

def generate_qr_codes_for_users():
    """G√©n√©rer les QR codes pour tous les utilisateurs qui n'en ont pas"""
    print("\nüî≤ G√©n√©ration des QR codes pour les utilisateurs...")
    
    users_without_qr = User.query.filter(User.qr_code_filename == None).all()
    
    if not users_without_qr:
        print("‚úÖ Tous les utilisateurs ont d√©j√† des QR codes")
        return True
    
    count = 0
    for user in users_without_qr:
        try:
            from flask import current_app
            upload_folder = current_app.config.get('UPLOAD_FOLDER', 'app/static/uploads')
            qr_save_path = os.path.join(upload_folder, 'qrcodes')
            
            qr_filename = generate_qr_code(user.unique_code, qr_save_path)
            user.qr_code_filename = qr_filename
            count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors de la g√©n√©ration du QR code pour {user.unique_code}: {e}")
    
    if count > 0:
        db.session.commit()
        print(f"‚úÖ {count} QR codes g√©n√©r√©s avec succ√®s")
    
    return True

def main():
    """Fonction principale d'initialisation"""
    print("=" * 60)
    print("üöÄ INITIALISATION DE LA BASE DE DONN√âES TALENTO")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        try:
            check_and_create_tables()
            check_and_add_columns()
            seed_countries()
            seed_cities()
            seed_talents()
            create_admin_user()
            create_demo_users()
            create_demo_cinema_talents()
            generate_codes_for_cinema_talents()
            generate_qr_codes_for_users()
            
            print("\n" + "=" * 60)
            print("‚úÖ INITIALISATION TERMIN√âE AVEC SUCC√àS")
            print("=" * 60)
            print(f"\nüìä Statistiques:")
            print(f"   - Pays: {Country.query.count()}")
            print(f"   - Villes: {City.query.count()}")
            print(f"   - Talents: {Talent.query.count()}")
            print(f"   - Utilisateurs: {User.query.count()}")
            print(f"   - Profils CINEMA: {CinemaTalent.query.count()}")
            print(f"\nüîê Compte admin: admin@talento.com")
            print(f"   Mot de passe: {'[Variable ADMIN_PASSWORD]' if os.environ.get('ADMIN_PASSWORD') else '@4dm1n'}")
            print("=" * 60)
            
        except Exception as e:
            print(f"\n‚ùå ERREUR: {e}")
            import traceback
            traceback.print_exc()
            sys.exit(1)

if __name__ == '__main__':
    main()
