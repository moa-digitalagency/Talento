"""
Syst√®me de migration automatique robuste pour TalentsMaroc.com
G√®re les nouvelles tables et colonnes sans faire crasher l'application
"""
import os
import logging
from sqlalchemy import inspect, text
from flask import current_app

logger = logging.getLogger(__name__)

def safe_auto_migrate(db):
    """
    Ex√©cute les migrations automatiques de mani√®re s√©curis√©e
    Ne fait jamais crasher l'application, m√™me en cas d'erreur
    """
    try:
        logger.info("üîÑ D√©marrage de la migration automatique...")
        
        with current_app.app_context():
            inspector = inspect(db.engine)
            existing_tables = inspector.get_table_names()
            
            logger.info(f"üìä Tables existantes: {len(existing_tables)}")
            
            if not _ensure_tables_exist(db, existing_tables):
                logger.warning("‚ö†Ô∏è Cr√©ation de tables √©chou√©e, mais application continue")
            
            if not _ensure_columns_exist(db, inspector):
                logger.warning("‚ö†Ô∏è Ajout de colonnes √©chou√©, mais application continue")
            
            logger.info("‚úÖ Migration automatique termin√©e")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la migration automatique: {e}")
        logger.error("‚ÑπÔ∏è L'application continue malgr√© l'erreur de migration")
        return False

def _ensure_tables_exist(db, existing_tables):
    """
    V√©rifie et cr√©e les tables manquantes
    Retourne False en cas d'erreur, mais ne l√®ve pas d'exception
    """
    try:
        required_tables = ['users', 'talents', 'user_talents', 'countries', 
                          'cities', 'cinema_talents', 'app_settings']
        
        missing_tables = [t for t in required_tables if t not in existing_tables]
        
        if missing_tables:
            logger.info(f"‚ûï Cr√©ation des tables manquantes: {', '.join(missing_tables)}")
            db.create_all()
            logger.info(f"‚úÖ {len(missing_tables)} tables cr√©√©es")
        else:
            logger.info("‚úÖ Toutes les tables requises existent")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False

def _ensure_columns_exist(db, inspector):
    """
    V√©rifie et ajoute les colonnes manquantes
    Retourne False en cas d'erreur, mais ne l√®ve pas d'exception
    """
    try:
        columns_added = 0
        
        is_sqlite = str(db.engine.url).startswith('sqlite')
        
        users_columns = {
            'availability': 'VARCHAR(50)',
            'work_mode': 'VARCHAR(50)',
            'rate_range': 'VARCHAR(100)',
            'profile_score': 'INTEGER DEFAULT 0',
            'cv_analysis': 'TEXT',
            'cv_analyzed_at': 'TIMESTAMP',
            'languages': 'VARCHAR(255)',
            'education': 'TEXT',
            'passport_number_encrypted': 'TEXT',
            'residence_card_encrypted': 'TEXT',
            'website': 'VARCHAR(255)',
            'imdb_url_encrypted': 'TEXT',
            'threads_encrypted': 'TEXT'
        }
        
        cinema_columns = {
            'unique_code': 'VARCHAR(12)' if is_sqlite else 'VARCHAR(12) UNIQUE',
            'qr_code_filename': 'VARCHAR(255)',
            'website': 'VARCHAR(255)',
            'imdb_url_encrypted': 'TEXT',
            'threads_encrypted': 'TEXT'
        }
        
        columns_added += _add_columns_to_table(db, inspector, 'users', users_columns)
        columns_added += _add_columns_to_table(db, inspector, 'cinema_talents', cinema_columns)
        
        if columns_added > 0:
            logger.info(f"‚úÖ {columns_added} colonnes ajout√©es au total")
        else:
            logger.info("‚úÖ Toutes les colonnes requises existent")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification des colonnes: {e}")
        return False

def _add_columns_to_table(db, inspector, table_name, columns_to_check):
    """
    Ajoute des colonnes manquantes √† une table sp√©cifique
    Retourne le nombre de colonnes ajout√©es
    """
    columns_added = 0
    
    try:
        if table_name not in inspector.get_table_names():
            logger.warning(f"‚ö†Ô∏è Table {table_name} n'existe pas encore")
            return 0
        
        existing_columns = [col['name'] for col in inspector.get_columns(table_name)]
        
        for col_name, col_type in columns_to_check.items():
            if col_name not in existing_columns:
                try:
                    logger.info(f"‚ûï Ajout de {table_name}.{col_name}...")
                    
                    with db.engine.begin() as conn:
                        conn.execute(text(f'ALTER TABLE {table_name} ADD COLUMN {col_name} {col_type}'))
                    
                    columns_added += 1
                    logger.info(f"‚úÖ Colonne {table_name}.{col_name} ajout√©e")
                    
                except Exception as e:
                    if 'already exists' in str(e).lower() or 'duplicate' in str(e).lower():
                        logger.debug(f"‚ÑπÔ∏è Colonne {table_name}.{col_name} existe d√©j√†")
                    else:
                        logger.warning(f"‚ö†Ô∏è Impossible d'ajouter {table_name}.{col_name}: {e}")
        
        return columns_added
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ajout de colonnes √† {table_name}: {e}")
        return columns_added

def run_initial_seed(db):
    """
    Lance le seeding initial des donn√©es (pays, villes, talents, admin)
    Utilis√© uniquement lors de la premi√®re installation
    """
    import subprocess
    import sys
    
    try:
        if os.environ.get('SKIP_AUTO_SEED') == '1':
            logger.info("‚è≠Ô∏è Seeding automatique d√©sactiv√© (SKIP_AUTO_SEED=1)")
            return True
        
        logger.info("üå± Lancement du seeding initial...")
        
        env = os.environ.copy()
        env['SKIP_AUTO_MIGRATION'] = '1'
        
        result = subprocess.run(
            [sys.executable, 'migrations_init.py'],
            env=env,
            capture_output=True,
            text=True,
            timeout=60
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Seeding initial termin√© avec succ√®s")
            logger.debug(result.stdout)
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Seeding initial avec code de retour {result.returncode}")
            logger.warning(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        logger.error("‚ùå Seeding initial timeout apr√®s 60 secondes")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du seeding initial: {e}")
        return False
